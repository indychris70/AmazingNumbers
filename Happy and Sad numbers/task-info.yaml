type: edu
files:
- name: src/numbers/Main.java
  visible: true
  text: |
    package numbers;

    public class Main {
        public static void main(String[] args) {
    //        write your code here
        }
    }
  learner_created: false
- name: test/util/Checker.java
  visible: false
  text: |
    package util;

    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.text.MessageFormat;
    import java.util.function.Predicate;
    import java.util.function.UnaryOperator;

    import static java.util.Objects.isNull;

    public class Checker implements UnaryOperator<UserProgram> {
        protected Predicate<UserProgram> validator;
        protected String feedback;
        protected Object[] parameters;

        protected Checker() {
            this("Incorrect output for user input: {0}.");
        }

        protected Checker(String feedback) {
            this($ -> true, feedback);
        }

        public Checker(Predicate<UserProgram> validator, String feedback) {
            this.feedback = feedback;
            this.validator = validator;
        }

        @Override
        public UserProgram apply(UserProgram program) {
            if (validator.test(program)) {
                return program;
            }
            throw new WrongAnswer(MessageFormat.format(feedback, isNull(parameters)
                    ? new Object[]{program.getInput(), program.getOutput()} : parameters));

        }

    }
  learner_created: false
- name: test/util/TextChecker.java
  visible: false
  text: |
    package util;

    public class TextChecker extends Checker {

        public TextChecker(String expected) {
            this(expected, "Expected that the output contains \"{2}\".");
        }

        public TextChecker(String expected, String feedback) {
            super(feedback);

            validator = program -> {
                parameters = new Object[]{program.getInput(), program.getOutput(), expected};
                return program.getOutput().toLowerCase().contains(expected.toLowerCase());
            };
        }

    }
  learner_created: false
- name: test/util/UserProgram.java
  visible: false
  text: |-
    package util;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.function.Function;

    public class UserProgram {
        private TestedProgram program;

        private Object input;
        private String output;

        public UserProgram start(String... args) {
            program = new TestedProgram();
            output = program.start(args);
            return this;
        }

        public UserProgram check(final Function<UserProgram, UserProgram> checker) {
            return checker.apply(this);
        }

        public CheckResult result() {
            return CheckResult.correct();
        }

        public UserProgram execute(Object userInput) {
            this.input = userInput;
            output = program.execute(userInput.toString());
            return this;
        }

        public String getOutput() {
            return output;
        }

        public Object getInput() {
            return input;
        }

        public boolean isFinished() {
            return program.isFinished();
        }
    }
  learner_created: false
- name: test/util/LinesChecker.java
  visible: false
  text: |
    package util;

    import static java.util.function.Predicate.not;

    public class LinesChecker extends Checker {

        public LinesChecker(final long expected) {
            super("Expected {0} non blank lines but actual output contains {1} lines.");

            validator = program -> {
                final var actual = program.getOutput().lines().filter(not(String::isBlank)).count();
                parameters = new Object[]{expected, actual};
                return actual == expected;
            };
        }


    }
  learner_created: false
- name: test/util/RegexChecker.java
  visible: false
  text: |
    package util;

    import java.util.regex.Pattern;

    public class RegexChecker extends Checker {
        private final Pattern expected;

        public RegexChecker(final String regexp, final String feedback) {
            this(regexp, Pattern.CASE_INSENSITIVE, feedback);
        }

        public RegexChecker(final String regexp, final int flags, final String feedback) {
            super(feedback);
            this.expected = Pattern.compile(regexp, flags);
            validator = program -> expected.matcher(program.getOutput()).find();
        }

    }
  learner_created: false
- name: test/Request.java
  visible: false
  text: |
    import util.LinesChecker;

    import java.util.Random;
    import java.util.regex.Pattern;

    public class Request {
        public static final Pattern PARAMETERS_SEPARATOR = Pattern.compile("\\s+");
        public static final int MAX_COUNT = 20;
        private static final Random random = new Random();

        private final String request;
        private final long start;
        private final int count;
        private String[] properties;

        public Request(String request) {
            this.request = request;
            var data = PARAMETERS_SEPARATOR.split(request, 3);
            int type = data.length;
            properties = type == 3 ? PARAMETERS_SEPARATOR.split(data[2]) : new String[0];
            count = type > 1 ? Integer.parseInt(data[1]) : 0;
            start = Long.parseLong(data[0]);
        }

        public static Request random(Parameter params) {
            final var start = 1 + random.nextInt(Short.MAX_VALUE);
            if (params == Parameter.ONE) {
                return new Request(String.valueOf(start));
            }
            final var count = 1 + random.nextInt(MAX_COUNT);
            if (params == Parameter.TWO) {
                return new Request(start + " " + count);
            }
            final var index = random.nextInt(NumberProperty.values().length);
            final var property = NumberProperty.values()[index].name();
            final var request = start + " " + count + " " + property;
            return new Request(request);
        }

        public long getStart() {
            return start;
        }

        public int getCount() {
            return count;
        }

        public String[] getProperties() {
            return properties;
        }

        public LinesChecker getLinesChecker() {
            return new LinesChecker(count + 1);
        }

        @Override
        public String toString() {
            return request;
        }

        enum Parameter {ONE, TWO, THREE}
    }
  learner_created: false
- name: test/ListChecker.java
  visible: false
  text: |
    import util.Checker;
    import util.UserProgram;

    import java.util.Arrays;
    import java.util.Set;
    import java.util.function.LongPredicate;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;
    import java.util.stream.LongStream;

    public class ListChecker extends Checker {
        private static final Pattern LINE_PATTERN = Pattern.compile(
                "\\s*(?<number>[\\d,. ]*\\d)\\s*(is|:|-)\\s*(?<properties>.+)",
                Pattern.CASE_INSENSITIVE);
        private static final Pattern NON_DIGIT_SYMBOL = Pattern.compile("\\D");
        private static final Pattern PROPERTIES_SEPARATOR = Pattern.compile("[, ;]+");

        private final long expectedCount;
        private final long[] expectedList;

        public ListChecker(Request request) {
            this(request.getStart(), request.getCount(), request.getProperties());
        }

        public ListChecker(long start, long count) {
            this(start, count, new String[0]);
        }

        public ListChecker(long start, long count, String properties) {
            this(start, count, properties.split("[, ]+"));
        }

        public ListChecker(long start, long count, String[] queries) {
            super("The list is incorrect");
            this.validator = this::test;
            this.expectedList = getExpectedList(start, count, queries);
            this.expectedCount = count;
        }

        private static long[] getExpectedList(long start, long count, String[] queries) {
            final var condition = Arrays.stream(queries).map(query -> {
                final var isNegative = query.startsWith("-");
                final var name = isNegative ? query.substring(1) : query;
                final var property = NumberProperty.valueOf(name.toUpperCase());
                return isNegative ? property.negate() : property;
            }).reduce(number -> true, LongPredicate::and);

            return LongStream
                    .iterate(start, n -> n > 0, n -> n + 1)
                    .filter(condition).limit(count).toArray();
        }

        public boolean test(UserProgram program) {
            final var lines = program.getOutput()
                    .lines()
                    .filter(Predicate.not(String::isBlank))
                    .limit(expectedCount)
                    .collect(Collectors.toUnmodifiableList());

            if (lines.size() != expectedCount) {
                return false;
            }

            final var iterator = lines.iterator();
            for (final long expectedNumber : expectedList) {
                final var actualLine = iterator.next();
                final var matcher = LINE_PATTERN.matcher(actualLine);
                if (!matcher.matches()) {
                    feedback = "Can''t parse line: \"{0}\". Expected: {1} is ...";
                    parameters = new Object[]{actualLine, expectedNumber};
                    return false;
                }

                final var rawNumber = matcher.group("number").strip();
                final var actualNumber = NON_DIGIT_SYMBOL.matcher(rawNumber).replaceAll("");

                if (!String.valueOf(expectedNumber).equals(actualNumber)) {
                    feedback = "Expected number is {0} but actual number is {1}.";
                    parameters = new Object[]{expectedNumber, rawNumber};
                    return false;
                }

                final var actualProperties = PROPERTIES_SEPARATOR
                        .splitAsStream(matcher.group("properties").toLowerCase())
                        .collect(Collectors.toUnmodifiableList());

                final var expectedProperties = Arrays
                        .stream(NumberProperty.values())
                        .filter(property -> property.test(expectedNumber))
                        .map(Enum::name)
                        .map(String::toLowerCase)
                        .collect(Collectors.toUnmodifiableSet());

                if (actualProperties.size() != expectedProperties.size()) {
                    feedback = "For the number {0} the expected number of properties is {1} but the actual number of properties is {2}. " +
                            "Expected properties are {3}. Actual properties are {4}";
                    parameters = new Object[]{expectedNumber, expectedProperties.size(),
                            actualProperties.size(), expectedProperties, actualProperties};
                    return false;
                }

                if (!Set.copyOf(actualProperties).equals(expectedProperties)) {
                    feedback = "For the number {0} the expected properties are {1}. The actual properties are {2}.";
                    parameters = new Object[]{expectedNumber, expectedProperties, actualProperties};
                }
            }
            return true;
        }
    }
  learner_created: false
- name: test/NumbersTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import util.*;

    import java.util.Arrays;
    import java.util.Random;
    import java.util.function.Function;
    import java.util.function.Predicate;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.LongStream;
    import java.util.stream.Stream;

    public final class NumbersTest extends StageTest {
        private static final Random random = new Random();

        private static final int NEGATIVE_NUMBERS_TESTS = 5;
        private static final int FIRST_NUMBERS = 15;
        private static final int RANDOM_TESTS = 10;
        private static final int MAX_PROPERTIES = 5;
        private static final int MAX_COUNT = 20;
        private static final int MIN_START = 2;

        private static final Checker WELCOME = new TextChecker("Welcome to Amazing Numbers!");

        private static final String EXPLAIN = "The program should explain this in the help.";
        private static final Function<UserProgram, UserProgram> HELP =
                new TextChecker("Supported requests")
                        .andThen(new RegexChecker(
                                "(one|a) natural number",
                                "In this stage, a user can enter one number to print a card. " + EXPLAIN))
                        .andThen(new TextChecker(
                                "two natural numbers",
                                "In this stage, a user can enter two numbers to print a list. " + EXPLAIN))
                        .andThen(new TextChecker(
                                "properties to search for",
                                "In this stage, a user can enter two numbers and properties to search for. "
                                        + EXPLAIN))
                        .andThen(new TextChecker(
                                "property preceded by minus",
                                "In this stage, a user can a minus in front of the property. "
                                        + EXPLAIN))
                        .andThen(new TextChecker(
                                "enter 0 to exit",
                                "Display the instructions on how to exit"));

        private static final Checker ASK_REQUEST = new TextChecker(
                "enter a request",
                "The program should ask a user to enter a request."
        );
        private static final Checker ERROR_FIRST = new RegexChecker(
                "The first (parameter|number) should be a natural number or zero",
                "The first parameter \"{0}\" is wrong. The program should print an error message."
        );
        private static final Checker ERROR_SECOND = new RegexChecker(
                "The second (parameter|number) should be a natural number",
                "The second parameter \"{0}\" is wrong. The program should print an error message."
        );
        private static final Checker ERROR_PROPERTY = new RegexChecker(
                "The property .+ is wrong",
                "The request: \"{0}\" has one wrong property. "
                        + "Expected message: \"The property ... is wrong\"."
        );
        private static final Checker ERROR_PROPERTIES = new RegexChecker(
                "The properties .+ are wrong",
                "The request: \"{0}\" has two or more incorrect properties. "
                        + "Expected that error message contains: \"The properties ... are wrong\"."
        );
        private static final Checker HELP_PROPERTIES = new TextChecker(
                "Available properties"
        );
        private static final Checker LIST_PROPERTIES = new Checker(
                program -> Arrays.stream(NumberProperty.values())
                        .map(Enum::name)
                        .map("(?i)\\b"::concat)
                        .map(Pattern::compile)
                        .map(p -> p.matcher(program.getOutput()))
                        .allMatch(Matcher::find),
                "If incorrect property has been specified, show the list of the available properties."
        );
        private static final Checker PROPERTIES_OF = new RegexChecker(
                "properties of \\d",
                "The first line of number''s properties should contain \"Properties of {0}\"."
        );
        private static final Checker MUTUALLY_EXCLUSIVE = new TextChecker(
                "The request contains mutually exclusive properties",
                "The request contains mutually exclusive properties. "
                        + "The program should cancel the request and warn the user."
        );
        private static final Checker RUNNING = new Checker(Predicate.not(UserProgram::isFinished),
                "The program should continue to work till the user enter \"0\"."
        );
        private static final Checker FINISHED = new Checker(UserProgram::isFinished,
                "The program should finish when the user entered \"0\"."
        );
        private final UserProgram program = new UserProgram();

        private final String[] wrongProperty = new String[]{
                "1 10 May", "40 2 bay", "37 4 8", "67 2 day", "2 54 Prime", "6 8 ...", "5 9 none"
        };
        private final String[] wrongSecondProperty = new String[]{
                "1 10 odd girl", "40 2 even day", "37 4 spy 89", "67 2 DUCK +"
        };
        private final String[] wrongTwoProperties = new String[]{
                "1 10 boy friend", "40 2 long day", "37 4 hot girl", "67 2 strong drake"
        };
        private static final String[] ONE_PROPERTY_WRONG = new String[]{
                "26534 3 buzz evens palindromic",
                "4384 2 odd -buzz -palindromic shiny gapful",
                "1 7 hot sunny odd odd -even",
                "78343 4 sunny -duck mac odd",
                "3 4 -even -sunny -hot"
        };
        private final String[] mutuallyExclusive = new String[]{
                // Stage #6 Two properties
                "5 1 odd even", "4 3 even odd", "32 2 sunny square", "3153 2 spy duck", "6 7 duck spy",
                // Stage #7 Several properties
                "1 2 spy odd sunny even", "7 2 sunny even duck buzz square", "9 5 even spy buzz duck",
                // Stage #8 Properties preceded by minus
                "6 6 -odd -even", "6 7 odd -odd", "8 1 -even even", "3 5 odd duck buzz -duck sunny"
        };
        // Stage #3

        @DynamicTest(order = 5)
        CheckResult welcomeTest() {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(repeat = NEGATIVE_NUMBERS_TESTS, order = 10)
        CheckResult notNaturalNumbersTest() {
            long negativeNumber = -random.nextInt(Byte.MAX_VALUE) - 1L;
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(negativeNumber)
                    .check(ERROR_FIRST)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(repeat = RANDOM_TESTS, order = 15)
        CheckResult notNaturalSecondNumberTest() {
            int first = 1 + random.nextInt(Short.MAX_VALUE);
            int negativeSecond = -random.nextInt(Short.MAX_VALUE);
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(first + " " + negativeSecond)
                    .check(ERROR_SECOND)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        // Stage #4

        @DynamicTest(order = 20)
        CheckResult naturalNumbersTest() {
            final var numbers = LongStream.concat(
                    LongStream.range(1, FIRST_NUMBERS),
                    random.longs(RANDOM_TESTS, 1, Long.MAX_VALUE)
            );

            program.start().check(WELCOME).check(HELP);

            numbers.forEach(number -> program
                    .check(ASK_REQUEST)
                    .execute(number)
                    .check(PROPERTIES_OF)
                    .check(new PropertiesChecker(number))
                    .check(RUNNING));

            return program
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(order = 40)
        CheckResult firstNumbersListTest() {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute("1 " + FIRST_NUMBERS)
                    .check(new LinesChecker(FIRST_NUMBERS + 1))
                    .check(new ListChecker(1, FIRST_NUMBERS))
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        private Object[][] getRandomTwo() {
            return random
                    .longs(RANDOM_TESTS, MIN_START, Long.MAX_VALUE - MAX_COUNT)
                    .mapToObj(start -> new Long[]{start, (long) 1 + random.nextInt(MAX_COUNT)})
                    .toArray(Long[][]::new);
        }

        // Stage #5

        @DynamicTest(data = "getRandomTwo", order = 44)
        CheckResult twoRandomNumbersTest(long start, long count) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(start + " " + count)
                    .check(new LinesChecker(count + 1))
                    .check(new ListChecker(start, count))
                    .check(RUNNING)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(data = "wrongProperty", order = 50)
        CheckResult wrongPropertyRequestTest(String wrongProperty) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(wrongProperty)
                    .check(ERROR_PROPERTY)
                    .check(HELP_PROPERTIES)
                    .check(LIST_PROPERTIES)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        // The test generates and checks request "1 10 <property>" for each property

        @DynamicTest(order = 53)
        CheckResult allPropertiesTest() {
            program.start().check(WELCOME).check(HELP);

            Arrays.stream(NumberProperty.values())
                    .map(Enum::name)
                    .map("1 10 "::concat)
                    .map(Request::new)
                    .peek(program.check(ASK_REQUEST)::execute)
                    .forEach(request -> program
                            .check(request.getLinesChecker())
                            .check(new ListChecker(request))
                            .check(RUNNING)
                    );

            return program.execute(0).check(FINISHED).result();
        }

        // Stage #6

        @DynamicTest(repeat = RANDOM_TESTS, order = 55)
        CheckResult randomTwoNumbersAndPropertyTest() {
            final var request = Request.random(Request.Parameter.THREE);
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(request)
                    .check(request.getLinesChecker())
                    .check(new ListChecker(request))
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(data = "wrongSecondProperty", order = 60)
        CheckResult wrongSecondPropertyRequestTest(String wrongSecondProperty) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(wrongSecondProperty)
                    .check(ERROR_PROPERTY)
                    .check(HELP_PROPERTIES)
                    .check(LIST_PROPERTIES)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(data = "wrongTwoProperties", order = 62)
        CheckResult wrongTwoPropertiesRequestTest(String wrongTwoProperties) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(wrongTwoProperties)
                    .check(ERROR_PROPERTIES)
                    .check(HELP_PROPERTIES)
                    .check(LIST_PROPERTIES)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        private Request[] searchTwoProperties() {
            return Stream.of(
                    "1 7 even spy",
                    "1 10 odd buzz",
                    "1 9 buzz gapful",
                    "1 10 spy buzz",
                    "100000 2 even spy",
                    "100 4 odd gapful",
                    "2000 4 palindromic duck")
                    .map(Request::new)
                    .toArray(Request[]::new);
        }

        @DynamicTest(data = "searchTwoProperties", order = 65)
        CheckResult twoNumbersAndTwoPropertyTest(Request request) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(request)
                    .check(request.getLinesChecker())
                    .check(new ListChecker(request))
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        // Stage #7

        @DynamicTest(data = "ONE_PROPERTY_WRONG", order = 72)
        CheckResult oneWrongPropertyTest(String request) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(request)
                    .check(ERROR_PROPERTY)
                    .check(HELP_PROPERTIES)
                    .check(LIST_PROPERTIES)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        private Request[] getRandomRequests() {
            return Stream.of(
                    "1 7 odd spy palindromic",
                    "1 10 even palindromic duck buzz",
                    "1 9 even palindromic duck buzz gapful",
                    "1 10 even sunny duck buzz gapful",
                    "100000 2 even spy buzz gapful",
                    "100 4 odd spy gapful",
                    "2000 4 even palindromic duck",
                    // Stage #8
                    "1 15 odd spy -duck spy buzz",
                    "1 2 jumping happy -spy"
            )
                    .map(Request::new)
                    .toArray(Request[]::new);
        }

        @DynamicTest(data = "getRandomRequests", order = 75)
        CheckResult manyPropertiesTest(Request request) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(request)
                    .check(request.getLinesChecker())
                    .check(new ListChecker(request))
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        // Stage #8 If a property is preceded by a minus, this property should not be present in a number

        @DynamicTest(data = "mutuallyExclusive", order = 80)
        CheckResult mutuallyExclusivePropertiesTest(String mutuallyExclusive) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(mutuallyExclusive)
                    .check(MUTUALLY_EXCLUSIVE)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        // The test generates and checks request "1 15 -PROPERTY" for all properties

        @DynamicTest(order = 85)
        CheckResult allMinusPropertiesTest() {
            program.start().check(WELCOME).check(HELP);

            Arrays.stream(NumberProperty.values())
                    .map(Enum::name)
                    .map("1 15 -"::concat)
                    .map(Request::new)
                    .peek(program.check(ASK_REQUEST)::execute)
                    .forEach(request -> program
                            .check(request.getLinesChecker())
                            .check(new ListChecker(request))
                            .check(RUNNING)
                    );

            return program.execute(0).check(FINISHED).result();
        }

    }
  learner_created: false
- name: test/NumberProperty.java
  visible: false
  text: |
    import java.util.HashSet;
    import java.util.Optional;
    import java.util.function.LongPredicate;
    import java.util.regex.Pattern;
    import java.util.stream.LongStream;

    import static java.lang.Character.getNumericValue;

    public enum NumberProperty implements LongPredicate {
        EVEN(x -> x % 2 == 0),
        ODD(x -> x % 2 != 0),
        BUZZ(x -> x % 7 == 0 || x % 10 == 7),
        DUCK(number -> digits(number).anyMatch(digit -> digit == 0)),
        PALINDROMIC(number -> {
            final var digits = String.valueOf(number);
            return new StringBuilder(digits).reverse().toString().equals(digits);
        }),
        GAPFUL(number -> number >= 100 &&
                number % (getNumericValue(String.valueOf(number).charAt(0)) * 10L + number % 10) == 0),
        SPY(x -> digits(x).sum() == digits(x).reduce(1L, (a, b) -> a * b)),
        SQUARE(number -> pow((long) Math.sqrt(number), 2) == number),
        SUNNY(number -> NumberProperty.SQUARE.test(number + 1)),
        JUMPING(number -> {
            for (long previous = number % 10, rest = number / 10; rest > 0; rest /= 10) {
                long current = rest % 10;
                long delta = previous - current;
                if (delta * delta != 1) {
                    return false;
                }
                previous = current;
            }
            return true;
        }),
        HAPPY(NumberProperty::isHappy),
        SAD(number -> !isHappy(number));

        private final LongPredicate hasProperty;
        private final Pattern pattern = Pattern.compile(
                name() + "\\s*[:-]\\s*(?<value>true|false)",
                Pattern.CASE_INSENSITIVE
        );

        NumberProperty(LongPredicate hasProperty) {
            this.hasProperty = hasProperty;
        }

        private static LongStream digits(long number) {
            return Long.toString(number).chars().mapToLong(Character::getNumericValue);
        }

        @Override
        public boolean test(long number) {
            return hasProperty.test(number);
        }

        public Optional<Boolean> extractValue(String output) {
            final var matcher = pattern.matcher(output);
            final var isFound = matcher.find();
            return Optional
                    .ofNullable(isFound ? matcher.group("value") : null)
                    .map(Boolean::valueOf);
        }

        public static long pow(long n, long p) {
            long result = 1;
            for (long i = p; i > 0; --i) {
                result *= n;
            }
            return result;
        }

        private static boolean isHappy(long number) {
            final var sequence = new HashSet<Long>();
            return LongStream
                    .iterate(number, i -> !sequence.contains(i), NumberProperty::happyNext)
                    .peek(sequence::add)
                    .anyMatch(i -> i == 1);
        }

        private static long happyNext(long number) {
            long result = 0;
            for (long i = number; i > 0; i /= 10) {
                int digit = (int) (i % 10);
                result += digit * digit;
            }
            return result;
        }
    }
  learner_created: false
- name: test/PropertiesChecker.java
  visible: false
  text: |
    import util.Checker;
    import util.UserProgram;

    public class PropertiesChecker extends Checker {
        private final long number;

        public PropertiesChecker(long number) {
            this.number = number;
            validator = this::test;
        }

        public boolean test(UserProgram program) {
            for (var property : NumberProperty.values()) {
                final var name = property.name();

                if (!program.getOutput().toLowerCase().contains(name.toLowerCase())) {
                    feedback = "The property \"{0}\" was not found in the output.";
                    parameters = new Object[]{name};
                    return false;
                }

                final var expected = property.test(number);
                final var actualValue = property.extractValue(program.getOutput());

                if (actualValue.isEmpty()) {
                    feedback = "The value for property {0} was not found. Expected: {1}";
                    parameters = new Object[]{name, expected};
                    return false;
                }
                final var actual = actualValue.get();

                if (expected != actual) {
                    feedback = "For the property {0}, the expected value is {1} but was found {2}.";
                    parameters = new Object[]{name, expected, actual};
                    return false;
                }
            }
            return true;
        }
    }
  learner_created: false
- name: src/numbers/AmazingNumber.java
  visible: true
  text: "package numbers;\n\nimport java.util.Arrays;\n\npublic class Input {\n  \
    \  enum Errors {\n        NOT_NATURAL(\"The %s parameter should be a natural number\
    \ or zero.\"),\n        INVALID_PROPERTIES(\"The propert%s %s %s wrong.\\nAvailable\
    \ properties: %s\"),\n        HAS_MUTUALLY_EXCLUSIVE_PROPERTIES(\"The request\
    \ contains mutually exclusive properties: %s\\nThere are no numbers with these\
    \ properties.\")\n        ;\n\n        private final String text;\n        public\
    \ static final String FIRST = \"first\";\n        public static final String SECOND\
    \ = \"second\";\n\n        Errors(String text) {\n            this.text = text;\n\
    \        }\n\n        public String getText() {\n            return text;\n  \
    \      }\n    }\n\n    enum PrintOptions {\n        ONE_LINER, LIST\n    }\n\n\
    \    enum Properties {\n        EVEN, ODD, BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY,\
    \ SQUARE, SUNNY, JUMPING;\n\n        public static final Properties[][] MUTUALLY_EXCLUSIVE_PROPERTIES\
    \ = {\n                {EVEN, ODD},\n                {DUCK, SPY},\n          \
    \      {SUNNY, SQUARE}\n        };\n\n        public static final Properties[]\
    \ VALID_PROPERTIES = values();\n    }\n\n    // Class fields\n\n    private long\
    \ value;\n    private long startingNumber;\n    private long counter;\n    private\
    \ Properties[] filteredProperties;\n    private PrintOptions defaultPrint;\n\n\
    \    // Public methods\n\n    public Input(String input) {\n        processInput(input);\n\
    \    }\n\n    public long getValue() {\n        return value;\n    }\n\n    public\
    \ void processInput(String input) {\n        String[] inputValArray = input.toUpperCase().split(\"\
    \ \");\n        switch (inputValArray.length) {\n            case 1:\n       \
    \         value = Long.valueOf(inputValArray[0]);\n                startingNumber\
    \ = value;\n                counter = 1;\n                defaultPrint = PrintOptions.LIST;\n\
    \                filteredProperties = new Properties[] {};\n                break;\n\
    \            case 2:\n                startingNumber = Long.valueOf(inputValArray[0]);\n\
    \                counter = Long.valueOf(inputValArray[1]);\n                value\
    \ = startingNumber;\n                defaultPrint = PrintOptions.ONE_LINER;\n\
    \                filteredProperties = new Properties[] {};\n                break;\n\
    \            default:\n                startingNumber = Long.valueOf(inputValArray[0]);\n\
    \                counter = Long.valueOf(inputValArray[1]);\n                value\
    \ = startingNumber;\n                defaultPrint = PrintOptions.ONE_LINER;\n\
    \                String[] filteredPropertiesArray = Arrays.copyOfRange(inputValArray,\
    \ 2, inputValArray.length);\n                filteredProperties = new Properties[filteredPropertiesArray.length];\n\
    \                int index = 0;\n                for (Properties property : Properties.VALID_PROPERTIES)\
    \ {\n                    if (Arrays.asList(filteredPropertiesArray).contains(property.name()))\
    \ {\n                        filteredProperties[index++] = property;\n       \
    \             }\n                }\n        }\n    }\n\n    public boolean isEven()\
    \ {\n        return value % 2 == 0;\n    }\n\n    public boolean isOdd() {\n \
    \       return !isEven();\n    }\n\n    public boolean isBuzz() {\n        return\
    \ endsWithDigit(7) || divisibleBy(7);\n    }\n\n    public boolean isDuck() {\n\
    \        long num = value;\n        while(num > 9) {\n            if (num % 10\
    \ == 0) {\n                return true;\n            } else {\n              \
    \  num = num / 10;\n            }\n        }\n        return false;\n    }\n\n\
    \    public boolean isPalindromic() {\n        return value == reversed();\n \
    \   }\n\n    public boolean isGapful() {\n        if (value < 100) {\n       \
    \     return false;\n        }\n        long leadingDigit = value;\n        long\
    \ trailingDigit = value % 10;\n        while (leadingDigit > 9) {\n          \
    \  leadingDigit /= 10;\n        }\n        long divisor = leadingDigit * 10 +\
    \ trailingDigit;\n        return value % divisor == 0;\n    }\n\n    public boolean\
    \ isSpy() {\n        return sumOfAllDigits() == productOfAllDigits();\n    }\n\
    \n    public boolean isPerfectSquare() {\n        return checkPerfectSquare(value);\n\
    \    }\n    \n    public boolean isSunny() {\n        return checkPerfectSquare(value\
    \ + 1);\n    }\n\n    public boolean isJumping() {\n        long num = value;\n\
    \        long previousDigit = value % 10;\n        long currentDigit;\n      \
    \  boolean isJumping = true;\n        while (num > 9) {\n            num /= 10;\n\
    \            currentDigit = num % 10;\n            if (Math.abs(previousDigit\
    \ - currentDigit) == 1) {\n                previousDigit = currentDigit;\n   \
    \         } else {\n                isJumping = false;\n                break;\n\
    \            }\n        }\n        return isJumping;\n    }\n\n    public void\
    \ printProperties() {\n        if (hasErrors()) {\n            printErrors();\n\
    \        } else {\n            if (defaultPrint.equals(PrintOptions.LIST)) {\n\
    \                printPropertiesList();\n            } else if (defaultPrint.equals(PrintOptions.ONE_LINER))\
    \ {\n                long hitCount = 0;\n                while (hitCount < counter)\
    \ {\n                    if (valueHasAllFilteredProperties()) {\n            \
    \            printPropertiesOneLiner();\n                        hitCount++;\n\
    \                    }\n                    value++;\n                }\n    \
    \            value = startingNumber;\n            }\n        }\n    }\n\n    //\
    \ Private methods\n\n    private boolean hasErrors() {\n        return !valueIsNatural()\
    \ || !counterIsNatural() || hasMutuallyExclusiveProperties() || !filteredPropertiesAreValid();\n\
    \    }\n\n    private void printErrors() {\n        if (!valueIsNatural()) {\n\
    \            Main.pLine(String.format(Errors.NOT_NATURAL.getText(), Errors.FIRST));\n\
    \        }\n        if (!counterIsNatural()) {\n            Main.pLine(String.format(Errors.NOT_NATURAL.getText(),\
    \ Errors.SECOND));\n        }\n        if (hasMutuallyExclusiveProperties()) {\n\
    \            Main.pLine(String.format(Errors.HAS_MUTUALLY_EXCLUSIVE_PROPERTIES.getText(),\
    \ Arrays.toString(getMutuallyExclusiveProperties())));\n        }\n        if\
    \ (!filteredPropertiesAreValid()) {\n            String[] invalidProps = getInvalidProperties();\n\
    \            String pluralBeing = invalidProps.length == 1 ? \"is\" : \"are\"\
    ;\n            String pluralPossesion = invalidProps.length == 1 ? \"y\" : \"\
    ies\";\n            Main.pLine(String.format(Errors.INVALID_PROPERTIES.getText(),\
    \ pluralPossesion, Arrays.toString(invalidProps), pluralBeing, Arrays.toString(Properties.VALID_PROPERTIES)));\n\
    \        }\n    }\n    \n    private boolean checkPerfectSquare(long val) {\n\
    \        double sq = Math.sqrt(val);\n        return ((sq - Math.floor(sq)) ==\
    \ 0);\n    }\n\n    private boolean isNatural(long num) {\n        return num\
    \ > 0;\n    }\n\n    private boolean valueIsNatural() {\n        return isNatural(value);\n\
    \    }\n\n    private boolean counterIsNatural() {\n        return isNatural(counter);\n\
    \    }\n\n    private boolean noPropertiesBeingFiltered() {\n        return filteredProperties.length\
    \ == 0;\n    }\n\n    private String[] getInvalidProperties() {\n        StringBuilder\
    \ invalidProperties = new StringBuilder();\n        for (Properties property :\
    \ filteredProperties) {\n            invalidProperties.append(filteredPropertyIsValid(property)\
    \ ? \"\" : String.format(\"%s \", property));\n        }\n        return invalidProperties.toString().split(\"\
    \ \");\n    }\n\n    private boolean filteredPropertyIsValid(Properties property)\
    \ {\n        return Arrays.asList(Properties.VALID_PROPERTIES).contains(property);\n\
    \    }\n\n    private boolean allFilteredPropertiesAreValid() {\n         return\
    \ Arrays.asList(Properties.VALID_PROPERTIES).containsAll(Arrays.asList(filteredProperties));\n\
    \    }\n\n    private boolean filteredPropertiesAreValid() {\n        return allFilteredPropertiesAreValid()\
    \ || noPropertiesBeingFiltered();\n    }\n\n    private boolean endsWithDigit(int\
    \ number) {\n        return value % 10 == number;\n    }\n\n    private boolean\
    \ divisibleBy(int number) {\n        return value % number == 0;\n    }\n\n  \
    \  private long reversed() {\n        long num = value;\n        long reversedNum\
    \ = 0;\n        long trailingDigit;\n        while(num > 0) {\n            trailingDigit\
    \ = num % 10;\n            reversedNum = reversedNum * 10 + trailingDigit;\n \
    \           num = num / 10;\n        }\n        return reversedNum;\n    }\n\n\
    \    private long sumOfAllDigits() {\n        long sum = 0;\n        long num\
    \ = value;\n        while (num > 0) {\n            sum += num % 10;\n        \
    \    num /= 10;\n        }\n        return sum;\n    }\n\n    private long productOfAllDigits()\
    \ {\n        long product = 1;\n        long num = value;\n        while (num\
    \ > 0) {\n            product *= num % 10;\n            num /= 10;\n        }\n\
    \        return product;\n    }\n\n    private boolean valueHasAllFilteredProperties()\
    \ {\n        if (noPropertiesBeingFiltered()) {\n            return true;\n  \
    \      }\n        boolean[] validatedProperties = new boolean[filteredProperties.length];\n\
    \        for (int i = 0; i < filteredProperties.length; i++) {\n            switch\
    \ (filteredProperties[i]) {\n                case EVEN:\n                    validatedProperties[i]\
    \ = isEven();\n                    break;\n                case ODD:\n       \
    \             validatedProperties[i] = isOdd();\n                    break;\n\
    \                case BUZZ:\n                    validatedProperties[i] = isBuzz();\n\
    \                    break;\n                case DUCK:\n                    validatedProperties[i]\
    \ = isDuck();\n                    break;\n                case PALINDROMIC:\n\
    \                    validatedProperties[i] = isPalindromic();\n             \
    \       break;\n                case GAPFUL:\n                    validatedProperties[i]\
    \ = isGapful();\n                    break;\n                case SPY:\n     \
    \               validatedProperties[i] = isSpy();\n                    break;\n\
    \                case SQUARE:\n                    validatedProperties[i] = isPerfectSquare();\n\
    \                    break;\n                case SUNNY:\n                   \
    \ validatedProperties[i] = isSunny();\n                    break;\n          \
    \      case JUMPING:\n                    validatedProperties[i] = isJumping();\n\
    \                    break;\n            }\n        }\n        for (boolean valueIsTrue\
    \ : validatedProperties) {\n            if (!valueIsTrue) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n\n    private\
    \ Properties[] getMutuallyExclusiveProperties() {\n        for (Properties[] exclusiveProperties\
    \ : Properties.MUTUALLY_EXCLUSIVE_PROPERTIES) {\n            if (Arrays.asList(filteredProperties).containsAll(Arrays.asList(exclusiveProperties)))\
    \ {\n                return exclusiveProperties;\n            }\n        }\n \
    \       return new Properties[] {};\n    }\n\n    private boolean hasMutuallyExclusiveProperties()\
    \ {\n        return getMutuallyExclusiveProperties().length > 0;\n    }\n\n  \
    \  private void printPropertiesList() {\n        Main.pLine(String.format(\"Properties\
    \ of %s\", value));\n        Main.pLine(String.format(\"        even: %b\", isEven()));\n\
    \        Main.pLine(String.format(\"         odd: %b\", isOdd()));\n        Main.pLine(String.format(\"\
    \        buzz: %b\", isBuzz()));\n        Main.pLine(String.format(\"        duck:\
    \ %b\", isDuck()));\n        Main.pLine(String.format(\" palindromic: %b\", isPalindromic()));\n\
    \        Main.pLine(String.format(\"      gapful: %b\", isGapful()));\n      \
    \  Main.pLine(String.format(\"         spy: %b\", isSpy()));\n        Main.pLine(String.format(\"\
    \      square: %b\", isPerfectSquare()));\n        Main.pLine(String.format(\"\
    \       sunny: %b\", isSunny()));\n        Main.pLine(String.format(\"     jumping:\
    \ %b\", isJumping()));\n    }\n\n    private void printPropertiesOneLiner() {\n\
    \        StringBuilder oneLiner = new StringBuilder()\n                .append(value)\n\
    \                .append(\" is \")\n                .append(isEven() ? \"even,\
    \ \" : \"\")\n                .append(isOdd() ? \"odd, \" : \"\")\n          \
    \      .append(isBuzz() ? \"buzz, \" : \"\")\n                .append(isDuck()\
    \ ? \"duck, \" : \"\")\n                .append(isPalindromic() ? \"palindromic,\
    \ \" : \"\")\n                .append(isGapful() ? \"gapful, \" : \"\")\n    \
    \            .append(isSpy() ? \"spy, \" : \"\")\n                .append(isPerfectSquare()\
    \ ? \"square, \" : \"\")\n                .append(isSunny() ? \"sunny, \" : \"\
    \")\n                .append(isJumping() ? \"jumping, \" : \"\");\n        //\
    \ remove trailing ','\n        oneLiner.delete(oneLiner.length() - 1, oneLiner.length());\n\
    \        Main.pLine(oneLiner.toString());\n    }\n}\n"
  learner_created: true
- name: src/numbers/Properties.java
  visible: true
  learner_created: true
- name: src/numbers/Input.java
  visible: true
  learner_created: true
- name: src/numbers/Controller.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/184/stages/938/implement
status: Solved
record: -1
